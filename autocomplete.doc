Features:
1. When user types, prompt most popular auto complete suggestions of K (between 2-5). User can choose one to use
2. User's typing and choice of autocomplete will be collected to build the system
3. They system can be built personal meaning that user's own data can be used to rank the autocomplete options
4. Other factors can also kick in such as location, event, which basically affect the ranking
5. For basic system, let's skip personalization and other policies

General System:
Front end: web/mobile text input
Service: servers serving requests and provide autocomplete words 
          List<String> GetAutoComplete(string)
          in RESTful: https://mysystem.com/getAutoComplete/v1/inputString?=
          These servers also take user's input and build trie for db
DB:     Two types needed: 

        Result DB: (K, V) K=typed string; V=List<Strings> for suggestions; 
        to serve query: servers send key and DB provides K hot words
        
        Compute DB: store tries so servers can update count of words and put result to result DB
        to update with collected data: servers update counter of each type word, Compute DB update trie and send changes of hot words to Result DB.
        
Performance and Scalability
        Say DAU = 100M; on average every types 10 chars.
        So 1B a day queries. 1B/86400 = 12K QPS on 1.2K connections per seconds; 
        Daytime usage mainly. So 3-5 fronting servers. 
        For DB, 12K QPS hitting DB (without considering caching yet), thus need 10-20 DBs (K-V) nosql (Cassandra)
        Storage for Result DB (English alphabet only): (26*K)+(26*26)*K...=K(26+26*26+26*26*26...)=K(26-26^11)/(-25)=150,000B bytes = 133T this is worst case. Assuming english words has 1/3 of those, 60T disks needed
        Storage for compute DB: a few servers to store those tries. 



Caching
        Client side caches (browser, mobile client)
        Caching server in a region; cache 1B queries
        Caching server (K, V) between servers and result DB

Data Collection and Computing Result
        User's each input (char) is captured and use to update tries, and then output to result DB periodically (12hour or 24hour)
        TrieNode {
        Map<char, TrieNode> map;
        boolean leaf;
        ArrayList <String> hotwords;
        }
        
        boolean TraverseTrie(TrieNode r, String typed, int index){
          if(r.leaf == true && index == (typed.length() - 1) ){
              UpdateHotWordsAlongthePath();
              return true;
          }
          else if(r.leaf == true) return false; //hit leaf, but still more chars
          char c = typed.charAt(index);
          if(r.map.contains(c))
             TraverseTrie(r.map.get(c), typed, index+1);
          else
             return false;
        }
        
        Every 12/24 hours, traverse the trie, and update the result DB
        
Schema of Result DB:
        String word: PK
        JSON {hotword1, hotword2, ..}
        Timestamp time
          
          Use hash of the word (PK) as partition key: 
                    pro: load evenly distributed to partitions. when more DB server are needed, only those need to be moved to the new server are moved. 
                    con: "the" "she" will be generating hot spots on some partitions. no range based query but not needed in this case.
          Use range based sharding: A-G: partition 1; H-N: partition 2...
                    pro: easy to manage, direct mapping
                    con: when more db servers are needed, lots of data need to be shifted
